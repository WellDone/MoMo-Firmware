Index: src/14bit-hexdecode.cc
===================================================================
--- src/14bit-hexdecode.cc	(revision 2281)
+++ src/14bit-hexdecode.cc	(working copy)
@@ -77,9 +77,6 @@
   { 0x3f00,  0x0400,  IORWF::construct },
   { 0x3f00,  0x0800,  MOVF::construct },
   { 0x3f00,  0x3000,  MOVLW::construct },
-  { 0x3f00,  0x3100,  MOVLW::construct },
-  { 0x3f00,  0x3200,  MOVLW::construct },
-  { 0x3f00,  0x3300,  MOVLW::construct },
   { 0x3f80,  0x0080,  MOVWF::construct },
   { 0x3fff,  0x0000,  NOP::construct },
   { 0x3fff,  0x0020,  NOP::construct },
Index: src/14bit-instructions.h
===================================================================
--- src/14bit-instructions.h	(revision 2281)
+++ src/14bit-instructions.h	(working copy)
@@ -94,7 +94,6 @@
 class BRW : public instruction
 {
 public:
-  int destination_index;
   unsigned int absolute_destination_index;
 
   BRW(Processor *new_cpu, unsigned int new_opcode, unsigned int address);
Index: src/Makefile.am
===================================================================
--- src/Makefile.am	(revision 2281)
+++ src/Makefile.am	(working copy)
@@ -44,6 +44,7 @@
 	modules.cc \
 	os_dependent.cc \
 	p1xf1xxx.cc \
+	p16f1847.cc \
 	p12f6xx.cc \
 	p12x.cc \
 	p16f62x.cc \
@@ -129,6 +130,7 @@
 	p12f6xx.h \
 	p12x.h \
 	p1xf1xxx.h \
+	p16f1847.h \
 	p16x5x.h \
 	p16f62x.h \
 	p16x6x.h \
Index: src/makefile.mingw
===================================================================
--- src/makefile.mingw	(revision 2281)
+++ src/makefile.mingw	(working copy)
@@ -71,6 +71,7 @@
 	operator.o		\
 	os_dependent.o		\
 	p1xf1xxx.o		\
+	p16f1847.o 		\
 	p12f6xx.o		\
 	p12x.o			\
 	p16f62x.o		\
Index: src/p16f1847.cc
===================================================================
--- src/p16f1847.cc	(revision 0)
+++ src/p16f1847.cc	(working copy)
@@ -0,0 +1,147 @@
+#include "p16f1847.h"
+#include "pic-ioports.h"
+#include "packages.h"
+
+Processor * P16F1847::construct(const char *name)
+{
+
+  P16F1847 *p = new P16F1847(name);
+
+  p->create(0x3ff, 256);
+  p->create_invalid_registers();
+  p->create_symbols();
+  return p;
+}
+
+P16F1847::~P16F1847()
+{
+  delete_sfr_register(m_portb);
+  delete_sfr_register(m_trisb);
+  delete_sfr_register(m_latb);
+  delete_sfr_register(m_wpub);
+  remove_sfr_register(&m_anselb);
+}
+
+P16F1847::P16F1847(const char *_name, const char *desc)
+  : P12F1822(_name,desc), 
+  m_anselb(this, "anselc", "Analog Select port b")
+{
+  m_portb = new PicPortBRegister(this, "portb", "", intcon, 8, 0xff);
+  m_trisb = new PicTrisRegister(this, "trisb", "", m_portb, false, 0xff);
+  m_latb = new PicLatchRegister(this, "latb", "", m_portb, 0xff);
+  m_wpub = new WPU(this, "wpub", "Weak Pull-up Register port b", m_portb, 0xff);
+}
+
+void  P16F1847::create(int ram_top, int eeprom_size)
+{
+
+  create_iopin_map();
+  e = new EEPROM_EXTND(this, pir2);
+  set_eeprom(e);
+
+  pic_processor::create();
+
+  e->initialize(eeprom_size, 16, 16, 0x8000);
+  e->set_intcon(intcon);
+  e->get_reg_eecon1()->set_valid_bits(0xff);
+
+  //Add GPR registers for each bank of RAM
+  //There are 1024 bytes of GPR, in 12 pages
+  //of 80 bytes each + 16 bytes of common ram
+  //and 48 bytes in bank 12.  Datasheet page 23
+  for (int bank=0; bank<=11; ++bank)
+  {
+  	int start = 0x20 + (bank*128);
+  	int end = start + 80 - 1;
+
+  	add_file_registers(start, end, 0x00);
+  }
+
+  //Common RAM and partial BANK12
+  add_file_registers(0x70, 0x7F, 0x00);
+  add_file_registers(0x620, 0x620 + 48 -1, 0x00);
+
+  //Initialize Special Function Registers
+  create_ports();
+
+  _14bit_e_processor::create_sfr_map();
+  P12F1822::create_sfr_map();
+  create_sfr_map();
+
+  // Set DeviceID (0b010100100 + 5 bits for revision ID for 16F1847)
+  if (m_configMemory && m_configMemory->getConfigWord(6))
+      m_configMemory->getConfigWord(6)->set(0x1480);
+}
+
+void P16F1847::create_sfr_map()
+{
+  create_ports();
+
+  ssp.set_sckPin(&(*m_portb)[4]);
+  ssp.set_sdiPin(&(*m_portb)[1]);
+  ssp.set_sdoPin(&(*m_portb)[2]);
+  ssp.set_ssPin(&(*m_portb)[5]);
+  ssp.set_tris(m_trisb);
+
+  // Pin values for default APFCON
+  usart.set_TXpin(&(*m_portb)[2]); // TX pin
+  usart.set_RXpin(&(*m_portb)[1]);  // RX pin
+}
+
+void P16F1847::create_ports()
+{
+  /*
+   * Configure port B and connect the digital and analog control
+   * registers.
+   */ 
+  add_sfr_register(m_portb, 0x0D);
+  add_sfr_register(m_trisb, 0x8D);
+  add_sfr_register(&m_anselb, 0x18D, RegisterValue(0xFE, 0));
+  add_sfr_register(m_wpub, 0x20D);
+
+  //All Port B pins are analog except for B0 (AN5-AN11, but not in order)
+  m_anselb.config(0xFE, 5);
+  m_anselb.setValidBits(0xFE);
+  m_anselb.setAdcon1(&adcon1);
+  m_anselb.setAnsel(&ansela);
+  ansela.setAnsel(&m_anselb);
+
+  adcon1.setIOPin(5, &(*m_portb)[6]);
+  adcon1.setIOPin(6, &(*m_portb)[7]);
+  adcon1.setIOPin(7, &(*m_portb)[5]);
+  adcon1.setIOPin(8, &(*m_portb)[4]);
+  adcon1.setIOPin(9, &(*m_portb)[3]);
+  adcon1.setIOPin(10, &(*m_portb)[2]);
+  adcon1.setIOPin(11, &(*m_portb)[1]);
+}
+
+void P16F1847::create_iopin_map()
+{
+	package = new Package(20);
+	if (!package)
+		return;
+
+  package->assign_pin(19, m_porta->addPin(new IO_bi_directional_pu("porta0"),0));
+  package->assign_pin(20, m_porta->addPin(new IO_bi_directional_pu("porta1"),1));
+  package->assign_pin(1, m_porta->addPin(new IO_bi_directional_pu("porta2"),2));
+  package->assign_pin(2, m_porta->addPin(new IO_bi_directional_pu("porta3"),3));
+  package->assign_pin(3, m_porta->addPin(new IO_bi_directional_pu("porta4"),4));
+  package->assign_pin(4, m_porta->addPin(new IO_bi_directional_pu("porta5"),5));
+  package->assign_pin(17, m_porta->addPin(new IO_bi_directional_pu("porta6"),6));
+  package->assign_pin(18, m_porta->addPin(new IO_bi_directional_pu("porta7"),7));
+
+  package->assign_pin(7, m_portb->addPin(new IO_bi_directional_pu("portb0"),0));
+  package->assign_pin(8, m_portb->addPin(new IO_bi_directional_pu("portb1"),1));
+  package->assign_pin(9, m_portb->addPin(new IO_bi_directional_pu("portb2"),2));
+  package->assign_pin(10, m_portb->addPin(new IO_bi_directional_pu("portb3"),3));
+  package->assign_pin(11, m_portb->addPin(new IO_bi_directional_pu("portb4"),4));
+  package->assign_pin(12, m_portb->addPin(new IO_bi_directional_pu("portb5"),5));
+  package->assign_pin(13, m_portb->addPin(new IO_bi_directional_pu("portb6"),6));
+  package->assign_pin(14, m_portb->addPin(new IO_bi_directional_pu("portb7"),7));
+
+  //VDD and VSS
+  package->assign_pin(5, 0);
+  package->assign_pin(6, 0);
+  package->assign_pin(15, 0);
+  package->assign_pin(16, 0);
+}
\ No newline at end of file
Index: src/p16f1847.h
===================================================================
--- src/p16f1847.h	(revision 0)
+++ src/p16f1847.h	(working copy)
@@ -0,0 +1,38 @@
+#ifndef __p16f1847__h__
+#define __p16f1847__h__
+
+#include "p1xf1xxx.h"
+
+/*
+ * PIC16F1847 - Enhanced Midrange Microcontroller with 1K RAM, 8K Flash and 256 bytes of EEPROM
+ *
+ * The processor is a larger version of the 16f1823 family (implemented in p1xf1xxx.{h,cc})
+ */
+
+class P16F1847 : public P12F1822
+{
+public:
+  PicPortBRegister   *m_portb;
+  PicTrisRegister    *m_trisb;
+  PicLatchRegister   *m_latb;
+  WPU                *m_wpub;
+  ANSEL_P            m_anselb;
+
+  virtual unsigned int program_memory_size() const {return 8192;}
+  virtual unsigned int register_memory_size() const {return 0x1000;}
+  virtual PROCESSOR_TYPE isa() {return _P16F1847_;}
+
+  virtual void create(int ram_top, int eeprom_size);
+  virtual void create_iopin_map();
+  virtual void create_sfr_map();
+
+   P16F1847(const char *_name=0, const char *desc=0);
+  ~P16F1847();
+
+  static Processor *construct(const char *name);
+
+private:
+  void create_ports();
+};
+
+#endif
Index: src/p1xf1xxx.cc
===================================================================
--- src/p1xf1xxx.cc	(revision 2281)
+++ src/p1xf1xxx.cc	(working copy)
@@ -463,7 +463,6 @@
 
 
   //add_sfr_register(indf,    0x00);
-  add_file_registers(0xa0, 0xbf, 0x00);
   add_sfr_register(m_porta, 0x0c);
   add_sfr_register(pir1,    0x11, RegisterValue(0,0),"pir1");
   add_sfr_register(pir2,    0x12, RegisterValue(0,0),"pir2");
@@ -719,6 +718,8 @@
   e->get_reg_eecon1()->set_valid_bits(0xff);
 
   add_file_registers(0x20, ram_top, 0x00);
+  add_file_registers(0xa0, 0xbf, 0x00);
+
   _14bit_e_processor::create_sfr_map();
   P12F1822::create_sfr_map();
   // Set DeviceID
@@ -1779,6 +1780,8 @@
   e->get_reg_eecon1()->set_valid_bits(0xff);
 
   add_file_registers(0x20, ram_top, 0x00);
+  add_file_registers(0xa0, 0xbf, 0x00);
+
   _14bit_e_processor::create_sfr_map();
   P12F1822::create_sfr_map();
   P16F1823::create_sfr_map();
Index: src/p1xf1xxx.h
===================================================================
--- src/p1xf1xxx.h	(revision 2281)
+++ src/p1xf1xxx.h	(working copy)
@@ -41,8 +41,6 @@
 SSP1_MODULE 	*m_ssp;
 T1GCON    	*m_t1gcon;
 CCPCON		*m_ccpcon;
-
-
 };
 
 class P12F1822 : public _14bit_e_processor
@@ -244,6 +242,7 @@
   virtual unsigned int register_memory_size () const { return 0x1000; }
 
 };
+
 class P16F1823 : public P12F1822
 {
 public:
@@ -262,4 +261,5 @@
   PicLatchRegister *m_latc;
   WPU              *m_wpuc;
 };
+
 #endif //__P1xF1xxx_H__
Index: src/pic-instructions.cc
===================================================================
--- src/pic-instructions.cc	(revision 2281)
+++ src/pic-instructions.cc	(working copy)
@@ -753,8 +753,7 @@
 BRW::BRW (Processor *new_cpu, unsigned int new_opcode, unsigned int address)
   : instruction(new_cpu, new_opcode, address)
 {
-  destination_index = cpu_pic->Wget();
-  absolute_destination_index = address + destination_index;
+  absolute_destination_index = address;
 
   new_name("brw");
 }
@@ -761,7 +760,7 @@
 
 void BRW::execute()
 {
-  cpu_pic->pc->jump(absolute_destination_index);
+  cpu_pic->pc->jump(absolute_destination_index + cpu_pic->Wget() + 1);
 
 }
 
@@ -772,7 +771,7 @@
   sprintf(return_str,"%s\t$%c0x%x\t;(0x%05x)",
 	  gpsimObject::name().c_str(),
 	  (opcode & 0x100) ? '-' : '+', 
-	  (destination_index & 0x1ff)<<1,
+	  (0 & 0x1ff)<<1,
 	  absolute_destination_index<<1);
 
   return(return_str);
Index: src/pic-processor.cc
===================================================================
--- src/pic-processor.cc	(revision 2281)
+++ src/pic-processor.cc	(working copy)
@@ -55,6 +55,7 @@
 #include "p12x.h"
 #include "p12f6xx.h"
 #include "p1xf1xxx.h"
+#include "p16f1847.h"
 #ifdef P17C7XX  // code no longer works
 #include "p17c75x.h"
 #endif
@@ -329,6 +330,9 @@
                               "__16F1788", "pic16f1788", "p16f1788", "16f1788");
 ProcessorConstructor pP16F1823(P16F1823::construct ,
                               "__16F1823", "pic16f1823", "p16f1823", "16f1823");
+ProcessorConstructor pP16F1847(P16F1847::construct ,
+                              "__16F1847", "pic16f1847", "p16f1847", "16f1847");
+
 #ifdef P17C7XX  // code no longer works
 ProcessorConstructor pP17C7xx(P17C7xx::construct ,
                               "__17C7xx", "pic17c7xx",  "p17c7xx", "17c7xx");
Index: src/pic-processor.h
===================================================================
--- src/pic-processor.h	(revision 2281)
+++ src/pic-processor.h	(working copy)
@@ -125,6 +125,7 @@
   _P16F886_,
   _P16F887_,
   _P16F1823_,
+  _P16F1847_,
   _P16F1788_,
   _P16F1789_,
   _P17C7xx_,

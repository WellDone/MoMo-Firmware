import os
import pic12_unit
import unit_test12
import unit_test
import utilities
import pic12
from autobuild import *

module_name = 'pic12_executive'

def build_exec_for_chip(arch):
	"""
	Configure Scons to build the MIB12 Executive for the 8bit pic microchip indicated in the arguments.
	"""

	dirs = arch.build_dirs()
	
	VariantDir(dirs['build'], 'src', duplicate=0)

	env = Environment(tools=['xc8_compiler', 'patch_mib12', 'xc8_symbols'], ENV = os.environ)
	env.AppendENVPath('PATH','../../tools/scripts')
	env['ARCH'] = arch
	env['MODULE'] = module_name

	#Load in all of the xc8 configuration from build_settings
	pic12.configure_env_for_xc8(env)

	Export('env')
	SConscript(os.path.join(dirs['build'], 'SConscript'))

	prods = [os.path.join(dirs['build'], 'mib12_executive_patched.hex'), os.path.join(dirs['build'], 'mib12_executive_symbols.h'), os.path.join(dirs['build'], 'mib12_executive_symbols.stb')]

	suffix = arch.arch_name()

	hexfile = env.InstallAs(os.path.join(dirs['output'], 'mib12_executive_%s.hex' % suffix), prods[0])
	symheader = env.InstallAs(os.path.join(dirs['output'], 'mib12_executive_symbols_%s.h' % suffix), prods[1])
	symtable = env.InstallAs(os.path.join(dirs['output'], 'mib12_executive_symbols_%s.stb' % suffix), prods[2])
	
	return [hexfile, symheader, symtable]

try:
	#Build for all targets
	family = utilities.get_family('mib12', modulefile='module_settings.json')
	family.for_all_targets(module_name, build_exec_for_chip)

	#Build all unit tests
	unit_test.build_units('test', family.targets(module_name))

	Alias('release', os.path.join('build', 'output'))
	Alias('test', os.path.join('build', 'test', 'output'))
	Default(['release', 'test'])
except MoMoException as e:
		print e.format()
		sys.exit(1)